<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DropPDFHere" xml:space="preserve">
    <value>PDF hierher ziehen...</value>
  </data>
  <data name="NoValidPackageLabel" xml:space="preserve">
    <value>Keine gültige Paketmarke!</value>
  </data>
  <data name="TheDHLLabelCouldNotBeSaved" xml:space="preserve">
    <value>Die DHL-Paketmarke konnte nicht gespeichert werden!</value>
  </data>
  <data name="ProductName" xml:space="preserve">
    <value>DHLabel</value>
  </data>
  <data name="CompanyName" xml:space="preserve">
    <value>NASS e.K.</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Beschreibung</value>
  </data>
  <data name="About" xml:space="preserve">
    <value>Über</value>
  </data>
  <data name="Quit" xml:space="preserve">
    <value>&amp;Beenden</value>
  </data>
  <data name="OpenPDFPackageLabel" xml:space="preserve">
    <value>PDF-Paketmarke öffnen</value>
  </data>
  <data name="PDFFilesPdfAllFiles" xml:space="preserve">
    <value>PDF-Dateien|*.pdf|Alle Dateien|*.*</value>
  </data>
  <data name="SaveLabelAsPDFFile" xml:space="preserve">
    <value>Paketmarke als PDF-Datei speichern</value>
  </data>
  <data name="PDFPackageLabelsPdfAllFiles" xml:space="preserve">
    <value>PDF-Paketmarken|*.pdf|Alle Dateien|*.*</value>
  </data>
  <data name="OpenPDF" xml:space="preserve">
    <value>&amp;Öffne PDF</value>
  </data>
  <data name="SavePDF" xml:space="preserve">
    <value>&amp;Speichere PDF</value>
  </data>
  <data name="Print" xml:space="preserve">
    <value>&amp;Drucke Label</value>
  </data>
  <data name="InfoAbout" xml:space="preserve">
    <value>Info über {0}</value>
  </data>
  <data name="ProductDescription" xml:space="preserve">
    <value>Wandelt online erstellte DHL Privat-, Business- oder Retouren-Paketmarken ins A6-Format zum Ausdruck auf einzelne Labels auf einem Laserdrucker um. Wie von DHL gefordert, können Pakete über 20 kg mit "Achtung schweres Paket" versehen werden.

Es kann per Mausklick zum "Öffnen mit"-Menü für PDF-Dateien hinzugefügt werden. So kann man es direkt nach dem Ausfüllen des DHL-Onlineformulars benutzen, ohne die generierte PDF-Datei speichern zu müssen. Das Programm kann bei Bedarf als oberstes Fenster definiert werden.

DHLabel ist ein stark erweiterter Fork des Programms DHLConvert von vulture20 (https://github.com/vulture20/DHLConvert).</value>
  </data>
  <data name="AlreadyRunning" xml:space="preserve">
    <value>Eine andere Instanz ist bereits aktiv!</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Fehler</value>
  </data>
  <data name="ApplicationStarted" xml:space="preserve">
    <value>Anwendung gestartet.</value>
  </data>
  <data name="ConvertingPleaseWait" xml:space="preserve">
    <value>Konvertiere {0}, bitte warten...</value>
  </data>
  <data name="PrparingDataForPrintingPleaseWait" xml:space="preserve">
    <value>Bereite Daten zum Drucken auf, bitte warten...</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Fertig.</value>
  </data>
  <data name="ShowStatusMessages" xml:space="preserve">
    <value>Statusmeldungen anzeigen</value>
  </data>
  <data name="ConvertingDataForPrintingPleaseWait" xml:space="preserve">
    <value>Konvertiere Daten zum Drucken, bitte warten...</value>
  </data>
  <data name="DHLabelDHLPackageLabel" xml:space="preserve">
    <value>DHLabel DHL Paketmarke</value>
  </data>
  <data name="DHLabelPackageLabel" xml:space="preserve">
    <value>DHLabel-Paketmarke</value>
  </data>
  <data name="File" xml:space="preserve">
    <value>&amp;Datei</value>
  </data>
  <data name="ExtensionPdfAssociatedWith" xml:space="preserve">
    <value>Erweiterung .pdf zugewiesen zu </value>
  </data>
  <data name="ReachablePlace" xml:space="preserve">
    <value>Erreichbarer Speicherort</value>
  </data>
  <data name="RegistryKey0NotFound" xml:space="preserve">
    <value>Registrierungsschlüssel {0} nicht gefunden!</value>
  </data>
  <data name="AlwaysOnTop" xml:space="preserve">
    <value>Immer oben</value>
  </data>
  <data name="OpenWith" xml:space="preserve">
    <value>Öffnen mit...</value>
  </data>
  <data name="HeavyPackage" xml:space="preserve">
    <value>Paket über 20 kg</value>
  </data>
  <data name="SetLabelPrinter" xml:space="preserve">
    <value>&amp;Labeldrucker einstellen</value>
  </data>
  <data name="Printer" xml:space="preserve">
    <value> - Drucker: </value>
  </data>
  <data name="SearchUpdate" xml:space="preserve">
    <value>&amp;Update suchen</value>
  </data>
  <data name="BusinessLabel" xml:space="preserve">
    <value>Businesslabel</value>
  </data>
  <data name="StandardLabel" xml:space="preserve">
    <value>Standardlabel</value>
  </data>
  <data name="ReturnLabel" xml:space="preserve">
    <value>Retourenlabel</value>
  </data>
</root>